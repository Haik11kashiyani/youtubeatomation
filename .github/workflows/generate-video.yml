name: Generate and Upload Shorts (Sequential)

on:
  workflow_dispatch:
    inputs:
      script_file:
        description: Optional custom script file (default script.txt)
        required: false
        default: script.txt
      runner:
        description: Which script to run (build_shorts.py or create_video.py)
        required: false
        default: build_shorts.py
  schedule:
    - cron: '0 3 * * *' # 03:00 UTC daily (optional)

permissions:
  contents: read

jobs:
  build:
    name: Render and upload shorts sequentially
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies (ffmpeg, ImageMagick)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg imagemagick
          ffmpeg -version
          convert --version

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: List project files
        run: |
          ls -la
          ls -la "12 photos" || true
          ls -la fonts || true

      - name: Render and upload sequentially
        env:
          PYTHONUNBUFFERED: "1"
          YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
          YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
          YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
        run: |
          python orchestrate.py

      - name: Find generated videos
        id: find_out
        run: |
          shopt -s nullglob
          vids=( outputs/*.mp4 outputs/*.mov outputs/*.mkv )
          echo "Found: ${vids[@]}"
          printf 'files=%s\n' "${vids[*]}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (videos)
        if: steps.find_out.outputs.files != ''
        uses: actions/upload-artifact@v4
        with:
          name: generated-videos
          path: |
            outputs/*.mp4
            outputs/*.mov
            outputs/*.mkv
          if-no-files-found: warn

      - name: Upload logs and intermediates
        uses: actions/upload-artifact@v4
        with:
          name: run-logs
          path: |
            **/*.log
            **/*.txt
            !requirements.txt
          if-no-files-found: ignore

  # Upload job removed; upload happens inline in the build job


