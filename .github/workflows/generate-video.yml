name: Generate and Upload Shorts (Smart Batching)
# Automated Gujarati Rashifal Videos
# 6:00 AM IST - Generate 12 videos, upload first 6, cleanup
# 7:00 AM IST - Upload remaining 6, final cleanup

on:
  workflow_dispatch:
    inputs:
      batch_mode:
        description: 'Batch mode: first or second'
        required: false
        default: 'first'
  schedule:
    # Batch 1: 6:00 AM IST (00:30 UTC) - Generate + Upload first 6
    - cron: '30 0 * * *'
    # Batch 2: 7:00 AM IST (01:30 UTC) - Upload remaining 6
    - cron: '30 1 * * *'

permissions:
  contents: read

jobs:
  upload-batch:
    name: Upload Rashifal Batch
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies (ffmpeg, ImageMagick, fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg imagemagick fonts-noto
          ffmpeg -version
          convert --version
          echo "--- ImageMagick policy before ---"
          sudo cat /etc/ImageMagick-6/policy.xml || true
          # Relax ImageMagick policy to allow @args used by MoviePy TextClip
          if [ -f /etc/ImageMagick-6/policy.xml ]; then
            sudo sed -i 's/<policy domain="path" rights="none" pattern="@\*"\/>/<!-- disabled by CI: allow @args for MoviePy -->/g' /etc/ImageMagick-6/policy.xml
          fi
          echo "--- ImageMagick policy after ---"
          sudo cat /etc/ImageMagick-6/policy.xml || true

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir -r requirements.txt
          echo "--- Python version ---"
          python --version
          echo "--- Checking MoviePy ---"
          python -c "import moviepy; print('MoviePy version:', moviepy.__version__)"
          python -c "from moviepy.editor import *; print('MoviePy.editor import OK')"
          echo "--- Checking Playwright ---"
          python -c "from playwright.sync_api import sync_playwright; print('Playwright import OK')"

      - name: Install Playwright browsers
        run: |
          playwright install chromium
          playwright install-deps chromium

      - name: List project files
        run: |
          echo "--- Root directory ---"
          ls -la
          echo "--- 12 photos directory ---"
          ls -la "12 photos" || echo "12 photos directory not found"
          echo "--- music directory ---"
          ls -la music || echo "music directory not found"
          echo "--- Checking for rashifal_data.json ---"
          cat rashifal_data.json | head -20 || echo "rashifal_data.json not found"

      - name: Determine batch mode
        id: batch
        run: |
          CURRENT_HOUR=$(date -u +%H)
          echo "Current UTC hour: $CURRENT_HOUR"
          
          if [ "$CURRENT_HOUR" -eq "0" ]; then
            echo "batch=first" >> $GITHUB_OUTPUT
            echo "ðŸŒ… This is BATCH 1 (6 AM IST): Generate + Upload first 6"
          elif [ "$CURRENT_HOUR" -eq "1" ]; then
            echo "batch=second" >> $GITHUB_OUTPUT
            echo "ðŸŒ„ This is BATCH 2 (7 AM IST): Upload remaining 6"
          else
            # Manual trigger - check input
            if [ "${{ github.event.inputs.batch_mode }}" == "second" ]; then
              echo "batch=second" >> $GITHUB_OUTPUT
              echo "Manual trigger: BATCH 2"
            else
              echo "batch=first" >> $GITHUB_OUTPUT
              echo "Manual trigger: BATCH 1"
            fi
          fi

      - name: Run orchestrate.py (Batch ${{ steps.batch.outputs.batch }})
        env:
          PYTHONUNBUFFERED: "1"
          YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
          YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
          YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
        run: |
          python orchestrate.py ${{ steps.batch.outputs.batch }}

      - name: Find remaining videos
        if: always()
        id: find_videos
        run: |
          if [ -d outputs ]; then
            VIDEO_COUNT=$(ls -1 outputs/*.mp4 2>/dev/null | wc -l)
            echo "videos_remaining=$VIDEO_COUNT" >> $GITHUB_OUTPUT
            echo "Remaining videos in outputs/: $VIDEO_COUNT"
          else
            echo "videos_remaining=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload remaining videos as artifacts
        if: always() && steps.batch.outputs.batch == 'first' && steps.find_videos.outputs.videos_remaining != '0'
        uses: actions/upload-artifact@v4
        with:
          name: remaining-videos-for-batch2
          path: outputs/*.mp4
          if-no-files-found: warn
          retention-days: 1

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-logs-batch-${{ steps.batch.outputs.batch }}-${{ github.run_number }}
          path: |
            **/*.log
          if-no-files-found: ignore
          retention-days: 3

      - name: Workflow summary
        if: always()
        run: |
          echo "## ðŸŽ¬ Gujarati Rashifal Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Batch:** ${{ steps.batch.outputs.batch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.batch.outputs.batch }}" == "first" ]; then
            echo "ðŸŒ… **Batch 1 Complete (6 AM IST)**" >> $GITHUB_STEP_SUMMARY
            echo "- Generated 12 videos" >> $GITHUB_STEP_SUMMARY
            echo "- Uploaded first 6 rashis" >> $GITHUB_STEP_SUMMARY
            echo "- Cleaned uploaded videos + temp files" >> $GITHUB_STEP_SUMMARY
            echo "- Remaining 6 videos ready for 7 AM upload" >> $GITHUB_STEP_SUMMARY
          else
            echo "ðŸŒ„ **Batch 2 Complete (7 AM IST)**" >> $GITHUB_STEP_SUMMARY
            echo "- Uploaded remaining 6 rashis" >> $GITHUB_STEP_SUMMARY
            echo "- All 12 videos published today" >> $GITHUB_STEP_SUMMARY
            echo "- Final cleanup done" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Check artifacts above for logs" >> $GITHUB_STEP_SUMMARY
